<rss version="2.0" xmlns:atom="https://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Lapolis&#39; Notes</title>
        <link>https://lapolis.github.io/posts/</link>
        <description>Recent content in Posts on Lapolis&#39; Notes</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Mon, 19 Oct 2020 08:32:45 +0100</lastBuildDate>
        <atom:link href="https://lapolis.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>HacktoberCTF_(palinka_team)</title>
            <link>https://lapolis.github.io/posts/2020/10/hacktoberctf_palinka_team/</link>
            <pubDate>Mon, 19 Oct 2020 08:32:45 +0100</pubDate>
            
            <guid>https://lapolis.github.io/posts/2020/10/hacktoberctf_palinka_team/</guid>
            <description>Not long ago, during a regular afternoon, I thought to myself: &amp;ldquo;I feel like I want to suffer a bit&amp;rdquo;. I quickly checked what CTF Time had on offer and there it was, the answer to all my dreams: Hacktober CTF.
It was at this point, without pressuring of course&amp;hellip; :P , I check to see if anyone wanted to join me in this, probably painful, adventure.
Still, no pressure.</description>
            <content type="html"><![CDATA[
    <img src="/img/hacktober/00_logo.png"  alt="hacktober ctf logo"  class="center"  style="border-radius: 8px;"  />


<p>Not long ago, during a regular afternoon, I thought to myself: &ldquo;I feel like I want to suffer a bit&rdquo;. I quickly checked what <a href="https://ctftime.org/">CTF Time</a> had on offer and there it was, the answer to all my dreams: <a href="https://ctftime.org/event/1108">Hacktober CTF</a>.<br>
It was at this point, without pressuring of course&hellip; :P , I check to see if anyone wanted to join me in this, probably painful, adventure.</p>

    <img src="/img/hacktober/1_rec.png"  alt="Recruitment"  class="center"  style="border-radius: 8px;"  />


<p>Still, no pressure.. ..</p>

    <img src="/img/hacktober/2_gr0.png"  alt="Gyorgy!"  class="center"  style="border-radius: 8px;"  />


<p>After no more than a day or two, the fucking dream team was complete! We were ready to go against stuff we had no idea how to solve, ready to cry fighting against those 59 challenges, ready to learn as much as we could but definitely <strong>not</strong> ready to give up</p>

    <img src="/img/hacktober/3_dreamteam.png"  alt="dream team"  class="center"  style="border-radius: 8px;"  />


<p>Let me introduce the members of the palinka_team:</p>
<ul>
<li>gr0g101 aka <a href="https://www.linkedin.com/in/gyorgy-antal/">Gyorgy</a></li>
<li>kaos aka <a href="https://www.linkedin.com/in/dennis-varischetti/">Dennis</a></li>
<li>fluffiie aka <a href="https://www.linkedin.com/in/mdrurb/">Maider</a></li>
<li>lapolis aka <a href="https://www.linkedin.com/in/nicola-pastres/">Nicola</a></li>
</ul>
<p>We all helped each other with solving each section, however this is where each team member focused more: </p>
<table>
<thead>
<tr>
<th>User</th>
<th> Category</th>
</tr>
</thead>
<tbody>
<tr>
<td>lapolis    &ndash;&gt;</td>
<td> web, SQL, forensics, Linux</td>
</tr>
<tr>
<td>kaos       &ndash;&gt;</td>
<td> programming, forensics</td>
</tr>
<tr>
<td>fluffiie    &ndash;&gt;</td>
<td> crypto</td>
</tr>
<tr>
<td>gr0g101 &ndash;&gt;</td>
<td> Traffic analysis, stego, forensics</td>
</tr>
</tbody>
</table>
<p>We really want to mention that the whole CTF was a fun competition with nice and creative challenges. A huge shout out to the organisers!!</p>
<p>The following write-ups are a selection of the most interesting challenges, chosen by the whole team, showing how we solved them and the thought processes behind them.</p>
<blockquote class="badgr-badge" style="display: inline-block; font-family: Helvetica, Roboto, &quot;Segoe UI&quot;, Calibri, sans-serif;">
	<a href="https://api.badgr.io/public/assertions/HHw1Lc2JT3aq3Xo3uxzi4g">
		<img src="https://media.badgr.com/uploads/badges/assertion-HHw1Lc2JT3aq3Xo3uxzi4g.png" width="120px" height="120px">
	</a>
	<p class="badgr-badge-name" style="hyphens: auto; overflow-wrap: break-word; word-wrap: break-word;margin: 0; font-size: 16px; font-weight: 600; font-style: normal; font-stretch: normal; line-height: 1.25; letter-spacing: normal; text-align: left; color: #012012c;">DEADFACE
	</p>
	<p class="badgr-badge-date" style="margin: 0; font-size: 12px; font-style: normal; font-stretch: normal; line-height: 1.67; letter-spacing: normal; text-align: left; color: #555555;">
		<strong style="font-size: 12px; font-weight: bold; font-style: normal; font-stretch: normal; line-height: 1.67; letter-spacing: normal; text-align: left; color: #000;">Awarded:
		</strong> Oct 18, 2020</p>
		<script async="async" src="https://badgr.com/assets/widgets.bundle.js"></script>
	</blockquote>

<blockquote class="badgr-badge" style="display: inline-block; font-family: Helvetica, Roboto, &quot;Segoe UI&quot;, Calibri, sans-serif;">
	<a href="https://api.badgr.io/public/assertions/5MYKihKsQ-W_7nS5aQjLww">
		<img src="https://media.badgr.com/uploads/badges/assertion-5MYKihKsQ-W_7nS5aQjLww.png" width="120px" height="120px">
	</a>
		<p class="badgr-badge-name" style="hyphens: auto; overflow-wrap: break-word; word-wrap: break-word;margin: 0; font-size: 16px; font-weight: 600; font-style: normal; font-stretch: normal; line-height: 1.25; letter-spacing: normal; text-align: left; color: #012012c;">Participant
		</p>
		<p class="badgr-badge-date" style="margin: 0; font-size: 12px; font-style: normal; font-stretch: normal; line-height: 1.67; letter-spacing: normal; text-align: left; color: #555555;">
			<strong style="font-size: 12px; font-weight: bold; font-style: normal; font-stretch: normal; line-height: 1.67; letter-spacing: normal; text-align: left; color: #000;">Awarded:</strong> Oct 18, 2020</p>
			<script async="async" src="https://badgr.com/assets/widgets.bundle.js"></script></blockquote>

<hr>
<h2 id="90s-kids">90s Kids</h2>
<p>For this challenge we had to run some queries on a database recovered from a dump.<br>
Wait.. What?? No SQL injections?? Who the hell ever did queries to a legit db??<br>
Well, first thing was to set up a new db called <code>westridge</code> to recover the dump which required some cleaning.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">unzip shallowgraveu.zip
sed -i <span style="color:#e6db74">&#39;s/utf8mb4/utf8/g&#39;</span> shallowgraveu.sql
sed -i <span style="color:#e6db74">&#39;s/utf8mb4_0900_ai_ci/utf8_general_ci/g&#39;</span> shallowgraveu.sql
sudo mysql -e <span style="color:#e6db74">&#34;create database westridge;&#34;</span>
sudo mysql westridge &lt; shallowgraveu.sql
</code></pre></div>
    <img src="/img/hacktober/5_90s.png"  alt="90 kids"  class="center"  style="border-radius: 8px;"  />


<p>Mmmmh.. this requires a regex for sure. No wait, MySQL knows exactly what a date is? Well.. Nice!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> <span style="color:#66d9ef">count</span>(user_id) <span style="color:#66d9ef">FROM</span> users 
<span style="color:#66d9ef">WHERE</span> <span style="color:#66d9ef">month</span>(dob) <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span> 
<span style="color:#66d9ef">AND</span> <span style="color:#66d9ef">year</span>(dob) 
<span style="color:#66d9ef">BETWEEN</span> <span style="color:#ae81ff">1990</span> <span style="color:#66d9ef">AND</span> <span style="color:#ae81ff">1999</span>;
</code></pre></div><hr>
<h2 id="student-body">Student Body</h2>

    <img src="/img/hacktober/6_stud.png"  alt="student body"  class="center"  style="border-radius: 8px;"  />


<p>Well, this one was hard. First we had to find out the instructor&rsquo;s name and surname.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> e.user_id, 
luc.<span style="color:#66d9ef">first</span>, 
luc.<span style="color:#66d9ef">last</span>, 
e.term_crs_id, 
<span style="color:#66d9ef">c</span>.title, 
tc.instructor, 
concat(prof.<span style="color:#66d9ef">first</span>,prof.<span style="color:#66d9ef">last</span>) <span style="color:#66d9ef">as</span> prof, 
r.role_name  
<span style="color:#66d9ef">FROM</span> enrollments e 
<span style="color:#66d9ef">JOIN</span> term_courses tc <span style="color:#66d9ef">on</span> tc.term_crs_id <span style="color:#f92672">=</span> e.term_crs_id 
<span style="color:#66d9ef">JOIN</span> courses <span style="color:#66d9ef">c</span> <span style="color:#66d9ef">on</span> tc.course_id <span style="color:#f92672">=</span> <span style="color:#66d9ef">c</span>.course_id 
<span style="color:#66d9ef">JOIN</span> users prof <span style="color:#66d9ef">on</span> tc.instructor <span style="color:#f92672">=</span> prof.user_id 
<span style="color:#66d9ef">JOIN</span> users luc <span style="color:#66d9ef">on</span> luc.user_id <span style="color:#f92672">=</span> e.user_id 
<span style="color:#66d9ef">JOIN</span> roles_assigned ra <span style="color:#66d9ef">on</span> ra.user_id <span style="color:#f92672">=</span> prof.user_id 
<span style="color:#66d9ef">JOIN</span> roles r <span style="color:#66d9ef">on</span> r.role_id <span style="color:#f92672">=</span> ra.role_id 
<span style="color:#66d9ef">WHERE</span> e.user_id <span style="color:#f92672">=</span> ( 
  <span style="color:#66d9ef">SELECT</span> user_id <span style="color:#66d9ef">FROM</span> users <span style="color:#66d9ef">WHERE</span> <span style="color:#66d9ef">first</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Lucia&#39;</span> ) 
<span style="color:#66d9ef">AND</span> tc.course_id <span style="color:#f92672">=</span> (
  <span style="color:#66d9ef">SELECT</span> course_id <span style="color:#66d9ef">FROM</span> courses <span style="color:#66d9ef">WHERE</span> title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;SOCI424&#39;</span>);
</code></pre></div>
    <img src="/img/hacktober/27_proff.png"  alt="professor"  class="center"  style="border-radius: 8px;"  />


<p>Finally, we could query the students headcount:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> <span style="color:#66d9ef">count</span>(user_id) 
<span style="color:#66d9ef">FROM</span> enrollments 
<span style="color:#66d9ef">WHERE</span> term_crs_id <span style="color:#66d9ef">in</span> ( 
  <span style="color:#66d9ef">SELECT</span> term_crs_id <span style="color:#66d9ef">FROM</span> term_courses <span style="color:#66d9ef">WHERE</span> instructor <span style="color:#f92672">=</span> <span style="color:#ae81ff">480</span> );
</code></pre></div>
    <img src="/img/hacktober/28_dbflag.png"  alt="db flaggg"  class="center"  style="border-radius: 8px;"  />


<hr>
<h2 id="jigsaw">Jigsaw</h2>

    <img src="/img/hacktober/7_jig.png"  alt="jugsaw"  class="center"  style="border-radius: 8px;"  />


<p>Finally something that we like, regex time!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> username,<span style="color:#66d9ef">last</span> 
<span style="color:#66d9ef">FROM</span> users 
<span style="color:#66d9ef">WHERE</span> <span style="color:#66d9ef">last</span> regexp <span style="color:#e6db74">&#39;^[K,R,I]{2}[^\n][[:alpha:]]{3}[E-N]$&#39;</span>;
</code></pre></div>
    <img src="/img/hacktober/29_regflag.png"  alt="regexxxxx"  class="center"  style="border-radius: 8px;"  />


<p>Ok that was quick :(</p>
<hr>
<h2 id="shellcode-extraction">Shellcode extraction</h2>

    <img src="/img/hacktober/8_shell.png"  alt="shellcode extraction"  class="center"  style="border-radius: 8px;"  />


<p>Our first idea was to convert it to a binary file and try to analyse or disassemble it, then figure out the name of the created file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">wget -O shellcode.hex https://tinyurl.com/y2ra3pzj
cat shellcode.hex | xxd -r -p &gt; shellcode.bin
</code></pre></div><p>Using xxd we could check for any potential strings, or hints or really <em>JUST ANYTHING USEFUL</em>, unfortunately no luck.<br>
We also tried to disassemble it with <a href="https://rada.re/n/radare2.html">radare2</a> and make some sense out of it, no success here.<br>
Then, IDA tried to rescue us; we threw the shellcode into IDA hoping to discover something juicy and we realised that it tried to interact with shell32.dll.</p>

    <img src="/img/hacktober/9_shell.png"  alt="shellcode"  class="center"  style="border-radius: 8px;"  />


<p>This is a Windows API that contains functions used for opening files or web pages&hellip; Mmmmmh&hellip; Let&rsquo;s switch to Windows then&hellip; Wait! Do you really want to run a piece of shellcode from real malware on your PC!?!? Are you mental? Well&hellip; We leave it to you, to decide that&hellip; All we knew, was&hellip;. It had to be solved at all costs!</p>
<p>After careful researching (banging our heads against the wall and crying) we came across a great tool called <a href="http://sandsprite.com/blogs/index.php?uid=7&amp;pid=152">scdbg</a>. A huge &ldquo;THANK YOU&rdquo; TO THE CREATORS of this amazing tool. It is capable of analysing shellcode at runtime and logs every detail, such as API calls and interactive hooks, in a simulated virtual environment. It is even possible to integrate it with IDA.</p>
<p>We need to activate report mode and API table scan to see if any function is called from shell32.dll to download or create a file. If yes, then we smashed it because the full path will be passed as an argument and hopefully it will be the ROAMING folder. So let’s see&hellip;</p>

    <img src="/img/hacktober/10_dbg.png"  alt="debuggggg"  class="center"  style="border-radius: 8px;"  />



    <img src="/img/hacktober/11_done.png"  alt="shellcode done"  class="center"  style="border-radius: 8px;"  />


<p>And yesssss we won!!! There we have it&hellip; The shellcode calls URLDownloadToFileA with 2 arguments. One is the malicious exe&rsquo;s location and the other is the full path that the downloaded file will be written to. The exe file lands inside the ROAMING folder under the current user. It also executes that file using the ShellExecuteA function. This challenge was an emotional roller-coaster, but we managed to learn from it AND discovered an amazing tool.</p>

    <img src="/img/hacktober/12_memeshelll.png"  alt="meme shellcode"  class="center"  style="border-radius: 8px;"  />


<hr>
<h2 id="red-rum">Red Rum</h2>

    <img src="/img/hacktober/13_code.png"  alt="redrum"  class="center"  style="border-radius: 8px;"  />


<p>The challenge &ldquo;Red Rum&rdquo; asked us to create a list of numbers between 1 and 500 and to replace some of them as the following:</p>
<ul>
<li>numbers divisible by 3 with &ldquo;Red&rdquo;</li>
<li>numbers divisible by 5 with &ldquo;Rum&rdquo;</li>
<li>numbers divisible by both 3 AND 5 with &ldquo;RedRum&rdquo;</li>
</ul>
<p>By netcatting env2.hacktober.io we got one more hint: &ldquo;Your answer should be comma-separated with no spaces&rdquo;.</p>

    <img src="/img/hacktober/14_hintnc.png"  alt="nc hint"  class="center"  style="border-radius: 8px;"  />


<p>After some coding&hellip; and swearing, we got it.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#f92672">import</span> socket 

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">rum</span>(out<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>):
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range (<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">501</span>):
        a, b, <span style="color:#f92672">=</span> i <span style="color:#f92672">%</span> <span style="color:#ae81ff">3</span>, i <span style="color:#f92672">%</span> <span style="color:#ae81ff">5</span>
        c <span style="color:#f92672">=</span> (a <span style="color:#f92672">+</span> b)
        <span style="color:#66d9ef">if</span>   c <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> : out <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#39;RedRum,&#39;</span>
        <span style="color:#66d9ef">elif</span> a <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> : out <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#39;Red,&#39;</span>
        <span style="color:#66d9ef">elif</span> b <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> : out <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#39;Rum,&#39;</span>
        <span style="color:#66d9ef">else</span>: out <span style="color:#f92672">+=</span> f<span style="color:#e6db74">&#39;{str(i)},&#39;</span>

    <span style="color:#66d9ef">return</span> f<span style="color:#e6db74">&#39;{out[:-1]}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>

s <span style="color:#f92672">=</span> socket<span style="color:#f92672">.</span>socket(socket<span style="color:#f92672">.</span>AF_INET, socket<span style="color:#f92672">.</span>SOCK_STREAM)
s<span style="color:#f92672">.</span>connect((<span style="color:#e6db74">&#39;143.110.147.190&#39;</span>, <span style="color:#ae81ff">5000</span>))
s<span style="color:#f92672">.</span>sendall(rum()<span style="color:#f92672">.</span>encode())
s<span style="color:#f92672">.</span>shutdown(socket<span style="color:#f92672">.</span>SHUT_WR)

data <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;!!--palinka_team--!!&#39;</span>
<span style="color:#66d9ef">while</span> data:
    data <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span>recv(<span style="color:#ae81ff">1024</span>)
    <span style="color:#66d9ef">print</span> (f<span style="color:#e6db74">&#39;{data.decode()}&#39;</span>)

s<span style="color:#f92672">.</span>close()
</code></pre></div>
    <img src="/img/hacktober/15_flagssss.png"  alt="flaggggg"  class="center"  style="border-radius: 8px;"  />


<hr>
<h2 id="boney-boi-breakdance">Boney Boi Breakdance</h2>

    <img src="/img/hacktober/16_bboy.png"  alt="b-boy"  class="center"  style="border-radius: 8px;"  />


<p>This challenge involved a little bit of digging around and guessing. We tried the usual tools to carve some information out from the picture, but nothing was working.</p>
<p>Combining the hint from the description and the fact that <a href="http://steghide.sourceforge.net/">steghide</a> expected a pass phrase we thought we had to find something about the picture itself. A little bit of googling directed us to a <a href="https://en.wikipedia.org/wiki/Danse_Macabre">Wikipedia page</a> containing a description of the picture. Scrolling through that page, right at the bottom, we found an interesting sentence mentioning the title of the picture and the author&hellip; Mmmmh&hellip; That could be the pass phrase.</p>

    <img src="/img/hacktober/17_wolgemut.png"  alt="pass phrase"  class="center"  style="border-radius: 8px;"  />



    <img src="/img/hacktober/18_passphrase.png"  alt="steghide"  class="center"  style="border-radius: 8px;"  />



    <img src="/img/hacktober/19_flag.png"  alt="flaaaaagggggg"  class="center"  style="border-radius: 8px;"  />


<hr>
<h2 id="an-evil-christmas-carol-3">An evil christmas carol 3</h2>

    <img src="/img/hacktober/20_evil.png"  alt="evil carol"  class="center"  style="border-radius: 8px;"  />


<p>Ok&hellip; there we were, with bleeding eyes, trying to solve the final session of traffic analysis. The task was to find out the type of malware family, so we fired up <a href="https://www.wireshark.org/">Wireshark</a>, used couple of eye drops, a quick Palinka and ready to dive in.</p>
<p>Since the malware was downloaded from a remote source, we should be able to see a clear destination IP and the name of the malicious file.</p>

    <img src="/img/hacktober/21_ipssss.png"  alt="evil carol"  class="center"  style="border-radius: 8px;"  />


<p>Shortly after, we found a nice site which can provide information on specific malware by its name or url. Doing a search for either “july22.dll” or “MwRrN5” throw us all the info we need. The malware type was there waiting for us. The last phase could be solved in a similar fashion.</p>

    <img src="/img/hacktober/22_mal-flag.png"  alt="flags everywhereeeeeeee"  class="center"  style="border-radius: 8px;"  />


<hr>
<h2 id="hell-spawn-1">Hell Spawn 1</h2>

    <img src="/img/hacktober/23_hell.png"  alt="hell spawn"  class="center"  style="border-radius: 8px;"  />


<p>Memory dump analysis? WTF is that? Ooooh, is it that magic thing done with <a href="https://www.volatilityfoundation.org/">volatily</a>? Yeah that&rsquo;s right.<br>
For this challenge we needed to find out which was the process that spawned the malicious &ldquo;explorer.exe&rdquo;. First we need to find the the profile used.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">volatility imageinfo -f ./mem.raw
</code></pre></div>
    <img src="/img/hacktober/24_prof.png"  alt="profile"  class="center"  style="border-radius: 8px;"  />


<p>Having the profile, it was possible to make some sense from this bunch of data. Using the &ldquo;cmdline&rdquo; function we easily get a list of all the commands.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">volatility --profile<span style="color:#f92672">=</span>Win10x64_17134 cmdline -f ./mem.raw 
</code></pre></div>
    <img src="/img/hacktober/25_cmline.png"  alt="cmdline"  class="center"  style="border-radius: 8px;"  />


<p>In order to confirm which process spawned which process, we used &ldquo;pstree&rdquo;.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">volatility --profile<span style="color:#f92672">=</span>Win10x64_17134 pstree -f ./mem.raw
</code></pre></div>
    <img src="/img/hacktober/26_pstree.png"  alt="pstree"  class="center"  style="border-radius: 8px;"  />


]]></content>
        </item>
        
        <item>
            <title>GPU_rig_setup_n_maintenance</title>
            <link>https://lapolis.github.io/posts/2020/09/gpu_rig_setup_n_maintenance/</link>
            <pubDate>Fri, 25 Sep 2020 08:38:16 +0100</pubDate>
            
            <guid>https://lapolis.github.io/posts/2020/09/gpu_rig_setup_n_maintenance/</guid>
            <description>A few days ago, a poor GPU rig, aka Ring0 (long story, don&amp;rsquo;t ask), was full of sticky dust and (probably) dry thermal paste, so I decided that something had to be done; at the end of the day, Ring0 never did anything wrong to deserve that. Keeping in mind my decision, I started to tear down Ring0 aiming for a deep cleaning; fortunately Dennis was there to help making the whole process way quicker.</description>
            <content type="html"><![CDATA[<p>A few days ago, a poor GPU rig, aka Ring0 (long story, don&rsquo;t ask), was full of sticky dust and (probably) dry thermal paste, so I decided that something had to be done; at the end of the day, Ring0 never did anything wrong to deserve that. Keeping in mind my decision, I started to tear down Ring0 aiming for a deep cleaning; fortunately <a href="https://www.linkedin.com/in/dennis-varischetti">Dennis</a> was there to help making the whole process way quicker.</p>
<p>Once Ring0 was nice and clean, wearing its new jumper (more details later), I realised that I had not upgraded it for a while and many new versions of Ubuntu Server have been released (was running on <a href="https://releases.ubuntu.com/16.04/">Ubuntu Server 16.04</a>. Knowing that, I decided that my Monday was not painful enough, so I brutally formatted the ssd, downloaded and installed <a href="https://ubuntu.com/download/server">Ubuntu Server 20.04.1</a>.</p>
<p>I just want to specify that this rig was born as an ETH miner, not as a password cracking rig; for this reason, the CPU is not powerful enough to generate wordlists on the fly or just to mutate them using some rules. The CPU is a <a href="https://ark.intel.com/content/www/us/en/ark/products/80806/intel-core-i7-4790-processor-8m-cache-up-to-4-00-ghz.html">i7-4790</a>, which is one of the best CPUs for the  FCLGA1150, but still not enough; just to give you a (very) rough example, it can generate enough words to fill up little less than 4x 1070 cracking in <code>-m16800</code>. Fortunately, it is ok to run wordlists as they are on disk. As soon as I will become a real adult with a real job I might think about a <a href="https://www.amd.com/en/products/cpu/amd-ryzen-threadripper-3990x">Threadripper</a> or a double CPU, we&rsquo;ll see.</p>
<p>Oh right, almost forgot to say: cracking hashes without permission is illegal. Don&rsquo;t do illegal stuff, that&rsquo;s bad; and go to sleep early, it is good for your health.</p>
<hr>
<h2 id="system-installation">System Installation</h2>
<p>I will skip the Ubuntu Server installation process, you can find the instructions pretty much <a href="https://ubuntu.com/tutorials/install-ubuntu-server#1-overview">everywhere</a>. Just one note: the GPU ring has NO SCREEN/DISPLAY attached, everything is done via ssh using the <code>root</code> user.</p>
<p>Vital thing first:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sed -i <span style="color:#e6db74">&#39;s/#force_color_prompt=yes/force_color_prompt=yes/g&#39;</span> ~/.bashrc
source ~/.bashrc
</code></pre></div><p>Updating and Upgrading is always good EXCEPT on the Kali VM for the OSCP exam, but that&rsquo;s another <a href="https://lapolis.blue/posts/2020/09/oscp_survival_101/">story</a>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">apt-get update
apt-get upgrade
</code></pre></div><p>Since the last time I&rsquo;ve done this process, lots of different flavours of the same Nvidia drivers have become available. Since I feel brave today I will go with the latest one: the <a href="https://www.nvidia.com/Download/driverResults.aspx/160555/en-us">Nvidia 450</a>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">apt-get install xserver-xorg-video-nvidia-450-server <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>				nvidia-headless-450-server <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>				nvidia-utils-450-server <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>				nvidia-settings <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>				nvidia-cuda-toolkit
</code></pre></div><p>Once all of the Nvidia drivers are installed and since I did not find any other way to control the GPU fan speed without having a display manager running, I install <a href="https://wiki.ubuntu.com/LightDM">LightDM</a>. Please, if you know how it should be done correctly let me know.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">apt-get install lightdm
</code></pre></div><p>The last thing before glory is to tell the Nvidia X driver how to behave. The config file can be generated using <a href="http://manpages.ubuntu.com/manpages/precise/en/man1/alt-nvidia-current-updates-xconfig.1.html#description">nvidia-xconfig</a> and not painfully write it by hand.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">nvidia-xconfig --allow-empty-initial-configuration <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>				--enable-all-gpus <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>				--cool-bits<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span> <span style="color:#75715e"># if you want to OC put 24</span>
</code></pre></div><p>Maybe <code>reboot</code> at this point. And just in case, why not checking if all the GPUs are detected at this point?</p>

    <img src="/img/gpu/nvidiasmi.png"  alt="Ring0 jumper-naked"  class="center"  style="border-radius: 8px;"  />


<p>Since I have different GPUs with different temps, I cannot do a nice and clean loop to start all the GPU&rsquo;s fans at the same speed, so I&rsquo;ve done this simple bash script. Of course, the 2 GPUs at 80% are the <a href="https://www.msi.com/Graphics-card/geforce-gtx-1070-gaming-x-8g">MSI</a> u.U .</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span>
export DISPLAY<span style="color:#f92672">=</span>:0 
export XAUTHORITY<span style="color:#f92672">=</span>/var/run/lightdm/root/:0

sudo nvidia-settings -c :0 -a <span style="color:#f92672">[</span>gpu:0<span style="color:#f92672">]</span>/GPUFanControlState<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
sudo nvidia-settings -c :0 -a <span style="color:#f92672">[</span>fan:0<span style="color:#f92672">]</span>/GPUTargetFanSpeed<span style="color:#f92672">=</span><span style="color:#ae81ff">80</span>

sudo nvidia-settings -c :0 -a <span style="color:#f92672">[</span>gpu:1<span style="color:#f92672">]</span>/GPUFanControlState<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
sudo nvidia-settings -c :0 -a <span style="color:#f92672">[</span>fan:1<span style="color:#f92672">]</span>/GPUTargetFanSpeed<span style="color:#f92672">=</span><span style="color:#ae81ff">65</span>

sudo nvidia-settings -c :0 -a <span style="color:#f92672">[</span>gpu:2<span style="color:#f92672">]</span>/GPUFanControlState<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
sudo nvidia-settings -c :0 -a <span style="color:#f92672">[</span>fan:2<span style="color:#f92672">]</span>/GPUTargetFanSpeed<span style="color:#f92672">=</span><span style="color:#ae81ff">65</span>

sudo nvidia-settings -c :0 -a <span style="color:#f92672">[</span>gpu:3<span style="color:#f92672">]</span>/GPUFanControlState<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
sudo nvidia-settings -c :0 -a <span style="color:#f92672">[</span>fan:3<span style="color:#f92672">]</span>/GPUTargetFanSpeed<span style="color:#f92672">=</span><span style="color:#ae81ff">80</span>
</code></pre></div><hr>
<h2 id="hashcat-installation">Hashcat Installation</h2>
<p>Well, we all knew that <a href="https://hashcat.net/hashcat/">Hashcat</a> was on today&rsquo;s menu. This is a fairly quick process.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git clone https://github.com/hashcat/hashcat.git
cd hashcat
make
</code></pre></div><p>And finally!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">./hashcat --benchmark -w4 -O
</code></pre></div><p><em>Results at the bottom.</em></p>
<hr>
<h2 id="physical-cleaning">Physical cleaning</h2>
<p>All the cleaning was done using <a href="https://www.amazon.co.uk/gp/product/B079YVPZDF/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&amp;psc=1">Isopropyl Alcohol (99%)</a> and random Microfibre Cleaning Cloths; where the cloths were not available, we used a soft toothbrush to gently (not really :P) remove all the dust trying to stay with Ring0 forever. The thermal paste we used is a classic <a href="https://www.amazon.co.uk/gp/product/B07LF66ZSV/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&amp;psc=1">ARCTIC MX-4</a>.
The whole thing was a mess, poor Ring0.</p>

    <img src="/img/gpu/mobo.gif"  alt="Mobo Dusty-Clean"  class="center"  style="border-radius: 8px;"  />


<p>The GPUs collected a lot of dust, but it is always nice to see the final results.<br>
After a couple of hours fighting against the effect of the Isopropyl Alcohol inhalation, everything started to look right again.</p>
<p>
    <img src="/img/gpu/msi.gif"  alt="MSI Dusty-Clean"  class="center"  style="border-radius: 8px;"  />

<br>

    <img src="/img/gpu/msi_evga.gif"  alt="MSI_n_EVGA Dusty-Clean"  class="center"  style="border-radius: 8px;"  />

</p>
<p>Since Ring0 is not running 24/7, the lovely owner of <a href="https://www.lunaticpin.com/">Lunatic_pin</a>, <a href="https://www.linkedin.com/in/lisa-polesello-4b900a180">Lisa</a>, created a nice total black on-size jumper. YOu can also find her on <a href="https://www.instagram.com/lunatic_pin/">Instagram</a>!</p>

    <img src="/img/gpu/ring0.gif"  alt="Ring0 jumper-naked"  class="center"  style="border-radius: 8px;"  />


<p>Useless to say, now Ring0 is happy, clean and finally protected. If anyone was wondering why 2 GPUs are missing, well, I wanted to play GTA V in 4k.</p>
<hr>
<hr>
<pre><code>Hashmode: 0 - MD5

Speed.#1.........: 20816.9 MH/s (47.95ms) @ Accel:64 Loops:1024 Thr:1024 Vec:8
Speed.#2.........: 21196.2 MH/s (47.12ms) @ Accel:64 Loops:1024 Thr:1024 Vec:8
Speed.#3.........: 19932.4 MH/s (49.87ms) @ Accel:64 Loops:1024 Thr:1024 Vec:8
Speed.#4.........: 20119.0 MH/s (49.44ms) @ Accel:64 Loops:1024 Thr:1024 Vec:8
Speed.#*.........: 82064.4 MH/s

Hashmode: 100 - SHA1

Speed.#1.........:  6953.4 MH/s (144.29ms) @ Accel:64 Loops:1024 Thr:1024 Vec:1
Speed.#2.........:  7091.4 MH/s (141.47ms) @ Accel:64 Loops:1024 Thr:1024 Vec:1
Speed.#3.........:  6755.1 MH/s (148.62ms) @ Accel:64 Loops:1024 Thr:1024 Vec:1
Speed.#4.........:  6841.9 MH/s (146.60ms) @ Accel:64 Loops:1024 Thr:1024 Vec:1
Speed.#*.........: 27641.9 MH/s

Hashmode: 1400 - SHA2-256

Speed.#1.........:  2531.5 MH/s (397.27ms) @ Accel:64 Loops:1024 Thr:1024 Vec:1
Speed.#2.........:  2582.3 MH/s (389.46ms) @ Accel:64 Loops:1024 Thr:1024 Vec:1
Speed.#3.........:  2497.3 MH/s (402.74ms) @ Accel:64 Loops:1024 Thr:1024 Vec:1
Speed.#4.........:  2519.8 MH/s (399.06ms) @ Accel:64 Loops:1024 Thr:1024 Vec:1
Speed.#*.........: 10130.8 MH/s

Hashmode: 1700 - SHA2-512

Speed.#1.........:   858.2 MH/s (292.82ms) @ Accel:64 Loops:256 Thr:1024 Vec:1
Speed.#2.........:   875.6 MH/s (287.06ms) @ Accel:64 Loops:256 Thr:1024 Vec:1
Speed.#3.........:   847.9 MH/s (296.26ms) @ Accel:64 Loops:256 Thr:1024 Vec:1
Speed.#4.........:   854.0 MH/s (294.33ms) @ Accel:64 Loops:256 Thr:1024 Vec:1
Speed.#*.........:  3435.6 MH/s

Hashmode: 22000 - WPA-PBKDF2-PMKID+EAPOL (Iterations: 4095)

Speed.#1.........:   374.3 kH/s (327.24ms) @ Accel:64 Loops:512 Thr:1024 Vec:1
Speed.#2.........:   380.3 kH/s (322.02ms) @ Accel:64 Loops:512 Thr:1024 Vec:1
Speed.#3.........:   354.1 kH/s (345.86ms) @ Accel:64 Loops:512 Thr:1024 Vec:1
Speed.#4.........:   356.5 kH/s (343.62ms) @ Accel:64 Loops:512 Thr:1024 Vec:1
Speed.#*.........:  1465.2 kH/s

Hashmode: 1000 - NTLM

Speed.#1.........: 37338.5 MH/s (26.63ms) @ Accel:64 Loops:1024 Thr:1024 Vec:8
Speed.#2.........: 37776.7 MH/s (26.19ms) @ Accel:64 Loops:1024 Thr:1024 Vec:8
Speed.#3.........: 34536.9 MH/s (28.30ms) @ Accel:64 Loops:1024 Thr:1024 Vec:8
Speed.#4.........: 34923.0 MH/s (28.15ms) @ Accel:64 Loops:1024 Thr:1024 Vec:8
Speed.#*.........:   144.6 GH/s

Hashmode: 3000 - LM

Speed.#1.........: 16593.0 MH/s (60.02ms) @ Accel:1024 Loops:1024 Thr:64 Vec:1
Speed.#2.........: 16864.5 MH/s (58.99ms) @ Accel:1024 Loops:1024 Thr:64 Vec:1
Speed.#3.........: 16692.8 MH/s (59.55ms) @ Accel:1024 Loops:1024 Thr:64 Vec:1
Speed.#4.........: 16810.2 MH/s (59.07ms) @ Accel:1024 Loops:1024 Thr:64 Vec:1
Speed.#*.........: 66960.6 MH/s

Hashmode: 5500 - NetNTLMv1 / NetNTLMv1+ESS

Speed.#1.........: 19982.4 MH/s (49.91ms) @ Accel:64 Loops:1024 Thr:1024 Vec:2
Speed.#2.........: 20447.9 MH/s (48.92ms) @ Accel:64 Loops:1024 Thr:1024 Vec:2
Speed.#3.........: 19200.5 MH/s (51.67ms) @ Accel:64 Loops:1024 Thr:1024 Vec:2
Speed.#4.........: 19352.6 MH/s (51.14ms) @ Accel:64 Loops:1024 Thr:1024 Vec:2
Speed.#*.........: 78983.4 MH/s

Hashmode: 5600 - NetNTLMv2

Speed.#1.........:  1433.6 MH/s (350.64ms) @ Accel:64 Loops:512 Thr:1024 Vec:1
Speed.#2.........:  1452.8 MH/s (346.00ms) @ Accel:64 Loops:512 Thr:1024 Vec:1
Speed.#3.........:  1399.4 MH/s (359.19ms) @ Accel:64 Loops:512 Thr:1024 Vec:1
Speed.#4.........:  1403.2 MH/s (358.24ms) @ Accel:64 Loops:512 Thr:1024 Vec:1
Speed.#*.........:  5689.1 MH/s

Hashmode: 1500 - descrypt, DES (Unix), Traditional DES

Speed.#1.........:   694.8 MH/s (361.55ms) @ Accel:256 Loops:1024 Thr:64 Vec:1
Speed.#2.........:   707.6 MH/s (355.05ms) @ Accel:256 Loops:1024 Thr:64 Vec:1
Speed.#3.........:   699.2 MH/s (359.26ms) @ Accel:256 Loops:1024 Thr:64 Vec:1
Speed.#4.........:   700.7 MH/s (358.48ms) @ Accel:256 Loops:1024 Thr:64 Vec:1
Speed.#*.........:  2802.3 MH/s

Hashmode: 500 - md5crypt, MD5 (Unix), Cisco-IOS $1$ (MD5) (Iterations: 1000)

Speed.#1.........:  8001.8 kH/s (118.10ms) @ Accel:64 Loops:1000 Thr:1024 Vec:1
Speed.#2.........:  8153.1 kH/s (115.78ms) @ Accel:64 Loops:1000 Thr:1024 Vec:1
Speed.#3.........:  7725.8 kH/s (122.62ms) @ Accel:64 Loops:1000 Thr:1024 Vec:1
Speed.#4.........:  7808.7 kH/s (121.27ms) @ Accel:64 Loops:1000 Thr:1024 Vec:1
Speed.#*.........: 31689.4 kH/s

Hashmode: 3200 - bcrypt $2*$, Blowfish (Unix) (Iterations: 32)

Speed.#1.........:    17098 H/s (163.72ms) @ Accel:32 Loops:16 Thr:12 Vec:1
Speed.#2.........:    17368 H/s (161.13ms) @ Accel:32 Loops:16 Thr:12 Vec:1
Speed.#3.........:    17717 H/s (158.00ms) @ Accel:32 Loops:16 Thr:12 Vec:1
Speed.#4.........:    17774 H/s (157.65ms) @ Accel:32 Loops:16 Thr:12 Vec:1
Speed.#*.........:    69957 H/s

Hashmode: 1800 - sha512crypt $6$, SHA512 (Unix) (Iterations: 5000)

Speed.#1.........:   123.7 kH/s (393.19ms) @ Accel:16 Loops:1024 Thr:1024 Vec:1
Speed.#2.........:   125.7 kH/s (386.89ms) @ Accel:16 Loops:1024 Thr:1024 Vec:1
Speed.#3.........:   118.6 kH/s (410.28ms) @ Accel:16 Loops:1024 Thr:1024 Vec:1
Speed.#4.........:   119.4 kH/s (407.55ms) @ Accel:16 Loops:1024 Thr:1024 Vec:1
Speed.#*.........:   487.3 kH/s

Hashmode: 7500 - Kerberos 5, etype 23, AS-REQ Pre-Auth

Speed.#1.........:   235.9 MH/s (266.13ms) @ Accel:512 Loops:128 Thr:64 Vec:1
Speed.#2.........:   242.0 MH/s (259.54ms) @ Accel:512 Loops:128 Thr:64 Vec:1
Speed.#3.........:   246.8 MH/s (254.35ms) @ Accel:512 Loops:128 Thr:64 Vec:1
Speed.#4.........:   245.1 MH/s (256.14ms) @ Accel:512 Loops:128 Thr:64 Vec:1
Speed.#*.........:   969.8 MH/s

Hashmode: 13100 - Kerberos 5, etype 23, TGS-REP

Speed.#1.........:   235.4 MH/s (266.75ms) @ Accel:512 Loops:128 Thr:64 Vec:1
Speed.#2.........:   241.7 MH/s (259.74ms) @ Accel:512 Loops:128 Thr:64 Vec:1
Speed.#3.........:   245.2 MH/s (255.98ms) @ Accel:512 Loops:128 Thr:64 Vec:1
Speed.#4.........:   247.1 MH/s (254.09ms) @ Accel:512 Loops:128 Thr:64 Vec:1
Speed.#*.........:   969.4 MH/s

Hashmode: 15300 - DPAPI masterkey file v1 (Iterations: 23999)

Speed.#1.........:    63700 H/s (327.20ms) @ Accel:64 Loops:512 Thr:1024 Vec:1
Speed.#2.........:    64290 H/s (323.94ms) @ Accel:64 Loops:512 Thr:1024 Vec:1
Speed.#3.........:    60097 H/s (346.28ms) @ Accel:64 Loops:512 Thr:1024 Vec:1
Speed.#4.........:    60523 H/s (344.09ms) @ Accel:64 Loops:512 Thr:1024 Vec:1
Speed.#*.........:   248.6 kH/s

Hashmode: 15900 - DPAPI masterkey file v2 (Iterations: 12899)

Speed.#1.........:    27856 H/s (349.57ms) @ Accel:8 Loops:1024 Thr:1024 Vec:1
Speed.#2.........:    28341 H/s (343.56ms) @ Accel:8 Loops:1024 Thr:1024 Vec:1
Speed.#3.........:    27382 H/s (355.39ms) @ Accel:8 Loops:1024 Thr:1024 Vec:1
Speed.#4.........:    27491 H/s (354.03ms) @ Accel:8 Loops:1024 Thr:1024 Vec:1
Speed.#*.........:   111.1 kH/s

Hashmode: 7100 - macOS v10.8+ (PBKDF2-SHA512) (Iterations: 1023)

Speed.#1.........:   345.9 kH/s (311.52ms) @ Accel:64 Loops:127 Thr:1024 Vec:1
Speed.#2.........:   351.2 kH/s (306.82ms) @ Accel:64 Loops:127 Thr:1024 Vec:1
Speed.#3.........:   319.8 kH/s (378.75ms) @ Accel:8 Loops:1023 Thr:1024 Vec:1
Speed.#4.........:   339.8 kH/s (356.22ms) @ Accel:8 Loops:1023 Thr:1024 Vec:1
Speed.#*.........:  1356.7 kH/s

Hashmode: 11600 - 7-Zip (Iterations: 16384)

Speed.#1.........:   284.2 kH/s (378.10ms) @ Accel:32 Loops:4096 Thr:1024 Vec:1
Speed.#2.........:   291.2 kH/s (371.52ms) @ Accel:32 Loops:4096 Thr:1024 Vec:1
Speed.#3.........:   277.2 kH/s (390.50ms) @ Accel:32 Loops:4096 Thr:1024 Vec:1
Speed.#4.........:   278.2 kH/s (387.37ms) @ Accel:32 Loops:4096 Thr:1024 Vec:1
Speed.#*.........:  1130.9 kH/s

Hashmode: 12500 - RAR3-hp (Iterations: 262144)

Speed.#1.........:    38832 H/s (395.21ms) @ Accel:128 Loops:16384 Thr:128 Vec:1
Speed.#2.........:    38872 H/s (394.57ms) @ Accel:128 Loops:16384 Thr:128 Vec:1
Speed.#3.........:    38727 H/s (396.13ms) @ Accel:128 Loops:16384 Thr:128 Vec:1
Speed.#4.........:    38817 H/s (395.36ms) @ Accel:128 Loops:16384 Thr:128 Vec:1
Speed.#*.........:   155.2 kH/s

Hashmode: 13000 - RAR5 (Iterations: 32799)

Speed.#1.........:    30698 H/s (249.43ms) @ Accel:16 Loops:1024 Thr:1024 Vec:1
Speed.#2.........:    31269 H/s (244.84ms) @ Accel:16 Loops:1024 Thr:1024 Vec:1
Speed.#3.........:    30535 H/s (500.91ms) @ Accel:32 Loops:1024 Thr:1024 Vec:1
Speed.#4.........:    30485 H/s (501.72ms) @ Accel:32 Loops:1024 Thr:1024 Vec:1
Speed.#*.........:   123.0 kH/s

Hashmode: 6211 - TrueCrypt RIPEMD160 + XTS 512 bit (Iterations: 1999)

Speed.#1.........:   225.6 kH/s (255.81ms) @ Accel:8 Loops:1024 Thr:1024 Vec:1
Speed.#2.........:   229.8 kH/s (251.06ms) @ Accel:8 Loops:1024 Thr:1024 Vec:1
Speed.#3.........:   220.1 kH/s (262.32ms) @ Accel:8 Loops:1024 Thr:1024 Vec:1
Speed.#4.........:   223.3 kH/s (258.53ms) @ Accel:8 Loops:1024 Thr:1024 Vec:1
Speed.#*.........:   898.8 kH/s

Hashmode: 13400 - KeePass 1 (AES/Twofish) and KeePass 2 (AES) (Iterations: 24569)

Speed.#1.........:    25895 H/s (790.25ms) @ Accel:32 Loops:1024 Thr:1024 Vec:1
Speed.#2.........:    26263 H/s (779.14ms) @ Accel:32 Loops:1024 Thr:1024 Vec:1
Speed.#3.........:    26586 H/s (769.22ms) @ Accel:64 Loops:512 Thr:1024 Vec:1
Speed.#4.........:    26744 H/s (764.51ms) @ Accel:64 Loops:512 Thr:1024 Vec:1
Speed.#*.........:   105.5 kH/s

Hashmode: 6800 - LastPass + LastPass sniffed (Iterations: 499)

Speed.#1.........:  1925.8 kH/s (242.26ms) @ Accel:32 Loops:499 Thr:1024 Vec:1
Speed.#2.........:  1962.1 kH/s (237.62ms) @ Accel:32 Loops:499 Thr:1024 Vec:1
Speed.#3.........:  1898.3 kH/s (493.12ms) @ Accel:64 Loops:499 Thr:1024 Vec:1
Speed.#4.........:  1909.5 kH/s (489.92ms) @ Accel:64 Loops:499 Thr:1024 Vec:1
Speed.#*.........:  7695.7 kH/s

Hashmode: 11300 - Bitcoin/Litecoin wallet.dat (Iterations: 200459)

Speed.#1.........:     3855 H/s (325.09ms) @ Accel:16 Loops:1024 Thr:1024 Vec:1
Speed.#2.........:     3912 H/s (319.03ms) @ Accel:16 Loops:1024 Thr:1024 Vec:1
Speed.#3.........:     3770 H/s (332.43ms) @ Accel:16 Loops:1024 Thr:1024 Vec:1
Speed.#4.........:     3813 H/s (328.73ms) @ Accel:16 Loops:1024 Thr:1024 Vec:1
Speed.#*.........:    15351 H/s
</code></pre>]]></content>
        </item>
        
        <item>
            <title>OSCP_survival_101</title>
            <link>https://lapolis.github.io/posts/2020/09/oscp_survival_101/</link>
            <pubDate>Fri, 18 Sep 2020 08:59:52 +0100</pubDate>
            
            <guid>https://lapolis.github.io/posts/2020/09/oscp_survival_101/</guid>
            <description>With this short post I want to put together a few very good tips I found on the internet about how to prepare for and how to survive the OSCP exam. This is not a tool-kit since you will just need a basic Kali installation for your OSCP exam.
 Preparing for the exam Since the OSCP certification is relatively expensive, especially if you&amp;rsquo;re still a student. However, there are simple ways to start preparing even before enrolling in order to save at least a month of paid lab.</description>
            <content type="html"><![CDATA[<p>With this short post I want to put together a few very good tips I found on the internet about how to prepare for and how to survive the OSCP exam.
This is <strong>not</strong> a tool-kit since you will just need a basic Kali installation for your OSCP exam.</p>
<hr>
<h2 id="preparing-for-the-exam">Preparing for the exam</h2>
<p>Since the <strong>OSCP</strong> certification is relatively expensive, especially if you&rsquo;re still a <strong>student</strong>. However, there are simple ways to start preparing even before enrolling in order to save at least a month of paid lab.</p>
<p>A huge thanks goes to this magnificent list of <a href="https://docs.google.com/spreadsheets/d/1dwSMIAPIam0PuRBkCiDI88pU3yzrqqHkDtBngUHNCw8/edit#gid=1839402159">HTB/VulnHub machines</a>; I have personally tackled just the HTB OSCP-like VMs, excluding a few of the &ldquo;More challenging than OSCP&rdquo; ones.<br>
I strongly recommend that, even after pwning each machine, you watch the walkthrough made by <a href="https://www.youtube.com/channel/UCa6eh7gCkpPo5XXUDfygQQA">IppSec</a> or, even better, watch all of the HTB videos made by <a href="https://www.youtube.com/c/s4vitar">s4vitar</a> .. yeah I know, he speaks Spanish, I do not know Spanish myself <code>(actually, I have learnt few words watching the videos :P)</code> but s4vitar shows and graphically explains everything step by step making the videos self explanatory.<br>
Watching other people&rsquo;s walkthrough can help to learn new techniques or just to improve your own one, at least that&rsquo;s what happened to me.</p>
<p>If you still have time, it would be a good idea to do all the easy and medium active machines. If you want to save a bit of time, just pick the one marked as CVE/real-life/enumeration, you do not really need to get mental on a CTF like machine.</p>
<p>If someone tells you <code>&quot;buy just two months of lab&quot;</code>, you gotta believe him/her. Obviously I did not, I thought that it would have been good to have 3 months time to pwn the whole lab <code>(reminder: I was not working during those 3 months)</code> and I ended up wasting the last month playing HTB.</p>
<hr>
<h2 id="the-actual-exam">The actual exam</h2>
<p><strong>REMEMBER</strong>: you are not looking to find any 0day! If you do your port scan right, you already have all you need to work toward your foothold.<br>
For the privesc, I would say that you just need to fire up <a href="https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite"><code>linPEAS|winPEAS</code></a>, but <strong>very basic</strong> enumeration should be more than enough. I personally ended up not even reading the output of <code>linPEAS|winPEAS</code> after running it.</p>
<p>A few days before the exam, I read a citation in a post about OSCP <code>(which I cannot find any more)</code> that explicitly said that during the exam, you will finish all of your ideas before your 24 hours ends. With that said, set a <code>2 hours alarm</code> and every time it fires off, just take a walk around the block. During those 2 hours, if you did not make any improvements on the machine you are working on, switch to another one.</p>
<p>I thought I would never say what I am going to say: <code>drink a lot of water</code>. Your brain will melt during those 24 hours, it needs fluids. About food, try to eat low fat high fibres, the last thing you want is to fight with the sleepiness after a huge lunch.</p>
<p>Do not be nervous <code>(I wasn't, I swear! :P)</code>, especially the day before the exam. Just rest, do not do anything related to the OSCP, do something relaxing <code>(I swore the whole day against a f*!$@&amp;g Pi)</code>.</p>
<p>About your notes, use something that automatically backups <code>(possibly encrypted)</code> everything you do every few minutes. I personally use <a href="https://joplinapp.org/">Joplin</a> because it is multi platform and I do not need to keep doing all of the backups manually. It also plays nice with the MD formatting and code highlighting. I was a bit sad to say goodbye to <a href="https://www.giuspen.com/cherrytree/">CherryTree</a>; however, I still suggest to use it if you need something simple that just runs everywhere.</p>
<p><strong>Screenshots</strong>: just do as many as you can. Since it is not possible to record the screen any more, just make sure you have enough screenshots for the report. One more thing, never close a terminal, you might need it later. Create 5 Desktops and use <a href="https://github.com/tmux/tmux/wiki">tmux</a>.</p>
<p>Once you survive the first 24 hours and you got at least 70 points, it is report time. You can either use the <a href="https://github.com/whoisflynn/OSCP-Exam-Report-Template">whoisflynn</a> template with a little personalization or the magnificent <a href="https://github.com/noraj/OSCP-Exam-Report-Template-Markdown">Offensive Security Exam Report Template in Markdown</a> by noraj.</p>
<hr>
<h2 id="the-glory">The Glory</h2>
<p>As soon as you get the confirmation of correctly submitting the report, open a beer, get a shower, open a beer and go to sleep. You deserve it.</p>
<p>Following those few tips, a simple noob like myself can easily pass the OSCP examination. The timeline of my almost 16 hours-long exam:</p>
<table>
<thead>
<tr>
<th>Time</th>
<th>   Machine point</th>
</tr>
</thead>
<tbody>
<tr>
<td>1 hours 30 mins</td>
<td>   bof - 25</td>
</tr>
<tr>
<td>+ 6 hours</td>
<td>   25</td>
</tr>
<tr>
<td>+ 4 hours 30 mins</td>
<td>   20</td>
</tr>
<tr>
<td>+ 2 hours</td>
<td>   10</td>
</tr>
<tr>
<td>+ 1 hour</td>
<td>   user on the 20 pointer</td>
</tr>
</tbody>
</table>
<hr>

    <img src="/img/certificate_me.png"  alt="Me and my OSCP"  class="center"  style="border-radius: 8px;"  />


<p>Very nice picture of myself holding the OSCP certificate which did not arrived yet.</p>
]]></content>
        </item>
        
    </channel>
</rss>
